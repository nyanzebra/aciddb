@startuml

'Server:

hide empty methods
hide empty fields

Database "1" -- "*" ClientConnection : clients
Database "1" -- "1" DataController : contains
Database "1" -- "1" Network : interacts with
Database "1" -- "*" Transaction : pending transactions

class Database {
	+ void initialize(integer externalPort, char[] filename)
	+ void listen()
	- void handleClient()
	+ char[][] processTransaction(Transaction transaction)
	+ void stop()
	+ void suspendTransactions()
	+ void resumeTransactions()
	+ boolean verify()
}

class Network {
	- integer port
	+ void initialize(integer port)
	+ ClientConnection listen()
	+ void close()
}

class ClientConnection {
	- void threadEntry()
	- Transaction getTransaction()
}

class Database

class Transaction {
	+ boolean readonly
	+ char[][] statements
}

Container "1" -- "*" ContainerIterator : creates

interface Container<ElementType> {
	- ElementType[] elements
	+ integer size()
	+ ContainerIterator begin()
	+ ContainerIterator end()
	+ void insert(ElementType element)
}

class ContainerIterator<ElementType> {
	+ ContainerIterator next()
	+ ElementType get()
}

DataController "1" -- "1..2" Datastore : contains primary/transitory
DataController "1" -- "1..2" Journal : contains primary/transitory

class DataController {
	+ void open(char[] filename)
	+ void close()
	+ char[] processStatement(char[] statement)
	+ boolean verify()
	- void rotate()
	- void rotateDatastores()
	- void rotateJournal()
}

Datastore "1" -- "1" Index : "index"

class Datastore {
	- File source
	+ void initialize(file source, boolean shouldCache = true)
	- Index createIndex()
	+ Record[] getRecord(char[] key)
	- Record[] readRecordFromSource(char[] key)
	+ DRMEStatus modifyRecord(DRME event)
	+ boolean verify()
	- Datastore mergeWith(Datastore other, char[] outputFile)
	- void deleteDatastore(Datastore datastore)
}

Index ..|> Container : <<bind>>\n<ElementType -> RecordHeader>
Index "*" -- "*" RecordNode : indexes

class Index {
	- map<integer identifier, RecordNode node> index
	+ void addRecord(Record record)
	+ void removeRecord(integer identifier)
}

Journal "1" -- "*" JournalEntry : contains
Journal ..|> Container : <<bind>>\n<ElementType -> JournalEntry>

class Journal {
	- File source
	+ void initialize(file source, integer version)
	+ void applyToDatastore(Datastore datastore)
	+ void writeEvent(DRME event)
	- void preprocess()
}

JournalEntry "1" -- "1" DRME : contains

class JournalEntry {
	+ integer identifier
	+ DRME event
}

DRMEDelete "*" -- "1" RecordNode : affected
DRMERename "*" -- "1" RecordNode : parent
DRMESetData "*" -- "1" RecordNode : affected
DRMEMove "*" -- "1" RecordNode : affected

DRME <|-- DRMECreate
DRME <|-- DRMEDelete
DRME <|-- DRMERename
DRME <|-- DRMESetData
DRME <|-- DRMEMove

abstract class DRME
class DRME {
	+ void process()
}

class DRMECreate {
	+ char[] target_key
	+ RecordType target_type
}

class DRMEMove {
	+ char[] target_key
}

class DRMERename {
	+ char[] old_name
	+ char[] new_name
}

class DRMESetData {
	+ variant new_data
}

enum DRMEStatus {
	StatusOK
	StatusDoesNotExist
	StatusFailure
}

RecordNode "1" -- "1" RecordHeader : header
RecordNode "1" -- "1" RecordBody : pointer to body

Enum RecordType {
	TypeAssociativeArray
	TypeArray
	TypeString
	TypeBinaryString
	TypeBoolean
	TypeInteger
	TypeFloatingPoint
}

class RecordHeader {
	+ integer identifier
	+ RecordType type
	+ integer size
}

abstract class RecordBody

RecordBody <|-- RecordAssociativeArray
RecordBody <|-- RecordArray
RecordBody <|-- RecordString
RecordBody <|-- RecordBinaryString
RecordBody <|-- RecordBoolean
RecordBody <|-- RecordInteger
RecordBody <|-- RecordFloatingPoint

class RecordAssociativeArray {
	+ integer numChildren
	+ pair<char[] key, integer childId>[] children
}

class RecordArray {
	+ integer numChildren
	+ integer childId[] children	
}

class RecordString {
	+ char[] data
}

class RecordBinaryString {
	+ char[] data
}

class RecordBoolean {
	+ boolean data
}

class RecordInteger {
	+ integer data
}

class RecordFloatingPoint {
	+ floatingPoint data
}

@enduml

@startuml

'Client:

hide empty methods
hide empty fields

class DBContext {
	- Address server
	- boolean connected
	- boolean error
	+ DBContext(Address server)
}

Transaction <|-- ClientTransaction

class ClientTransaction {
	+ ClientTransaction(DBContext context)
	+ Result commit()
	+ void abort()
	+ void add(char[][] statements)
}

class Result {
	+ Variant[] responses
}

class Transaction {
	+ boolean readonly
	+ char[][] statements
}

class Network {
	+ Address address
	+ void send()
}

DBContext "1" -- "1" Network

@enduml