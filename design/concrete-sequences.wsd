@startuml

'connect to server'

ClientApplication -> DatabaseContext : create DatabaseContext with address
DatabaseContext -> Network : connect(address)
alt Connection Succeeded
	Network -> Network : connection successful
	Network -> DatabaseContext : return success
else Connection Failed
	Network -> Network : connection failed
	Network -> DatabaseContext : return failure
end
DatabaseContext -> ClientApplication : return status

@enduml

@startuml

'library process transaction'

ClientApplication -> Transaction : create Transaction
ClientApplication -> Transaction : add(statement)
Transaction -> ClientApplication :
ClientApplication -> Transaction : commit()
Transaction -> DatabaseContext : commit(self)
DatabaseContext -> DatabaseContext : serialize(transaction)
DatabaseContext -> Network : send(transaction)
Network -> DatabaseServer : send(data)
DatabaseServer -> DatabaseServer : process(transaction)
DatabaseServer -> Network : return result
Network -> DatabaseContext : return result
DatabaseContext -> Transaction : return result
Transaction -> ClientApplication : return result

@enduml

@startuml

'CLI process statement'

loop until client terminates program
	User -> CLIApplication : type statement
	CLIApplication -> CLIApplication : invoke Library Process Transaction sequence
	CLIApplication -> User : return data 
end

@enduml

@startuml

'Backend process statement'

ClientLibrary -> DatabaseServer : send(transaction)
loop for each statement in transaction
    DatabaseServer -> DatabaseServer : process(statement)
    alt TransactionSucceeds
        DatabaseServer -> ClientLibrary : return result
    else TransactionFails
        DatabaseServer -> ClientLibrary : return error
    end
end
@enduml
